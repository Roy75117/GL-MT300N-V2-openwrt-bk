#!/bin/sh
. /lib/functions/gl_util.sh

DEVS="br-lan br-guest $(get_wan)"

stop_qos() {
	for dev in $DEVS; do
		tc qdisc del dev $dev root 2>/dev/null
		tc qdisc del dev $dev ingress 2>/dev/null
		tc qdisc del dev ${dev}-ifb root 2>/dev/null
		ip link del dev ${dev}-ifb 2>/dev/null
	done
}

start_qos() {
	local dl=`echo $1 | awk '{printf("%d",$1*8)}'`
	local up=`echo $2 | awk '{printf("%d",$1*8)}'`
	local lan_ipaddr=`uci -q get network.lan.ipaddr`
	
	for dev in $DEVS; do
		tc qdisc add dev $dev root handle 1: htb
		tc class add dev $dev parent 1: classid 1:1 htb rate ${dl}kbit
		ip link add dev ${dev}-ifb name ${dev}-ifb type ifb
		ip link set dev ${dev}-ifb up
		tc qdisc add dev ${dev}-ifb root handle 1: htb
		tc class add dev ${dev}-ifb parent 1: classid 1:1 htb rate ${up}kbit
		tc qdisc add dev $dev ingress
		tc filter add dev $dev parent ffff: protocol ip u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ${dev}-ifb
		tc filter add dev $dev parent ffff: protocol ipv6 u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ${dev}-ifb
		#access to the gateway is not restricted
		tc filter add dev $dev parent 1:0 prio 1 protocol ip u32 match ip src $lan_ipaddr flowid 1:1
	done
}

add_dev() {
	mac="$1"
	dl=`echo $2 | awk '{printf("%d",$1*8)}'`
	up=`echo $3 | awk '{printf("%d",$1*8)}'`
	cnt=0

	mac_id=$(echo $mac | sed 's/://g')
	if [ "$(uci -q get qos.$mac_id)" == "queue" ];then
		cnt=`uci -q get qos.$mac_id.cnt`
	else
		uci set qos.$mac_id="queue"
		uci set qos.$mac_id.mac="$mac"
	fi

	if [ -z "$cnt" -o "$cnt" == "0" ];then
		cnt=$(($(uci -q get qos.general.sum) + 1))
		[ -z "$cnt" ] && cnt=1
		uci set qos.general.sum="$cnt"
		uci set qos.$mac_id.cnt="$cnt"
	fi

	uci set qos.$mac_id.upload="$3"
	uci set qos.$mac_id.download="$2"
	uci commit qos

	mach=$(echo $mac | sed 's/://g' | cut -c1-4)
	macl=$(echo $mac | sed 's/://g' | cut -c5-12)
	if [ $dl -gt 0 ]; then
		for dev in $DEVS; do
			tc class add dev $dev parent 1:1 classid 1:1$cnt htb rate ${dl}kbit ceil ${dl}kbit
			tc filter add dev $dev parent 1:0 protocol ip u32 match u16 0x0800 0xffff at -2 match u32 0x$macl 0xffffffff at -12 match u16 0x$mach 0xffff at -14 flowid 1:1$cnt
			tc filter add dev $dev parent 1:0 protocol ipv6 u32 match u16 0x86dd 0xffff at -2 match u32 0x$macl 0xffffffff at -12 match u16 0x$mach 0xffff at -14 flowid 1:1$cnt
		done
	fi

	mach=$(echo $mac | sed 's/://g' | cut -c1-8)
	macl=$(echo $mac | sed 's/://g' | cut -c9-12)
	if [ $up -gt 0 ];then
		for dev in $DEVS; do
			tc class add dev ${dev}-ifb parent 1:1 classid 1:1$cnt htb rate ${up}kbit ceil ${up}kbit
			tc filter add dev ${dev}-ifb parent 1:0 protocol ip u32 match u16 0x0800 0xffff at -2 match u16 0x$macl 0xffff at -4 match u32 0x$mach 0xffffffff at -8 flowid 1:1$cnt
			tc filter add dev ${dev}-ifb parent 1:0 protocol ipv6 u32 match u16 0x86dd 0xffff at -2 match u16 0x$macl 0xffff at -4 match u32 0x$mach 0xffffffff at -8 flowid 1:1$cnt
		done
	fi
}

del_dev() {
	mac="$1"
	mac_id=$(echo $mac | sed 's/://g')
	cnt=$(uci get qos.$mac_id.cnt)
	dl=`echo $(uci get qos.$mac_id.download) | awk '{printf("%d",$1*8)}'`
	up=`echo $(uci get qos.$mac_id.upload) | awk '{printf("%d",$1*8)}'`


	mach=$(echo $mac | sed 's/://g' | cut -c1-4)
	macl=$(echo $mac | sed 's/://g' | cut -c5-12)
	if [ $dl -gt 0 ]; then
		for dev in $DEVS; do
			for prio in $(tc filter list dev $dev | grep "flowid 1:1$cnt"| awk '{print $7}')
			do
				tc filter del dev $dev parent 1: prio $prio u32
			done
			tc class del dev $dev parent 1:1 classid 1:1$cnt htb rate ${dl}kbit ceil ${dl}kbit
		done
	fi

	mach=$(echo $mac | sed 's/://g' | cut -c1-8)
	macl=$(echo $mac | sed 's/://g' | cut -c9-12)
	if [ $up -gt 0 ];then
		for dev in $DEVS; do
			for ifb_prio in $(tc filter list dev ${dev}-ifb | grep "flowid 1:1$cnt"| awk '{print $7}')
			do
				tc filter del dev ${dev}-ifb parent 1: prio $ifb_prio u32
			done
			tc class del dev ${dev}-ifb parent 1:1 classid 1:1$cnt htb rate ${up}kbit ceil ${up}kbit
		done
	fi

	if [ "$2" != "only_remove_ts" ];then
		uci -q delete qos.$mac_id
		uci commit qos
	fi
}

case "$1" in
	"stop")
		stop_qos
	;;
	"start")
		stop_qos
		start_qos $2 $3
	;;
	"add")
		add_dev $2 $3 $4
		/etc/init.d/shortcut-fe restart
	;;
	"del")
		del_dev $2 $3
		/etc/init.d/shortcut-fe restart
		[ -z "$(grep queue /etc/config/qos  |grep -v "#")" ] && /etc/init.d/gl_eqos stop
	;;
	"status")
		case "$2" in
			"qdisc")
				for dev in $DEVS; do
					echo -e "\n******* $dev *******\n"
					tc qdisc list dev $dev
					tc qdisc list dev ${dev}-ifb
				done
			;;
			"class")
				for dev in $DEVS; do
					echo -e "\n******* $dev *******\n"
					tc class list dev $dev
					tc class list dev ${dev}-ifb
				done
			;;
			"filter")
				for dev in $DEVS; do
					echo -e "\n******* $dev *******\n"
					tc filter list dev $dev
					tc filter list dev ${dev}-ifb
				done
			;;
			"all")
				for dev in $DEVS; do
					echo -e "\n******* $dev *******\n"
					tc qdisc list dev $dev
					tc class list dev $dev
					tc filter list dev $dev
					tc qdisc list dev ${dev}-ifb
					tc class list dev ${dev}-ifb
					tc filter list dev ${dev}-ifb
				done
			;;
			*)
				for dev in $DEVS; do
					echo -e "\n******* $dev *******\n"
					tc filter list dev $dev
					tc filter list dev ${dev}-ifb
				done
			;;
		esac
	;;
	*)
		echo "Usage: $0 <command> [options]"
		echo "Commands:"
		echo "  start dl_rate up_rate              		# Total bandwidth (KB/S)"
		echo "  stop"
		echo "  add mac dl_rate up_rate            		# Limiting the bandwidth of a single IP (KB/S)"
		echo "Example:"
		echo "  $0 start 125000 125000                  # Total bandwidth: down 125000 KB/S up 125000 KB/S"
		echo "  $0 add 18:c0:4d:dc:4f:cc 2048 1024  	# down 2048 KB/S  up 1024 KB/S"
		echo "  $0 del 18:c0:4d:dc:4f:cc "
	;;
esac
